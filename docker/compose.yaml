services:
  tsg:
    image: telemetry/server
    build:
      context: ..
      target: telemetry-server
      args:
        serverCfg: composeServer.yaml
    expose:
      - 9999
    networks:
      - external
      - internal
    ports:
      - "9999:9999"
    depends_on:
      db:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
      pre-deploy-checks:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --insecure http://tsg:9999/healthz || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 40

  tsa:
    image: telemetry/admin
    build:
      context: ..
      target: telemetry-admin
      args:
        adminCfg: composeAdmin.yaml
    expose:
      - 9998
    networks:
      - external
      - internal
    ports:
      - "9998:9998"
    depends_on:
      tsg:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --insecure http://tsa:9998/healthz || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 40

  db:
    image: telemetry/postgres
    build:
      context: ..
      target: telemetry-postgres
    restart: always
    networks:
      - internal
    environment:
      POSTGRES_PASSWORD: telemetry
      POSTGRES_USER: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - pgdata:/var/lib/pgsql/data

  init-db:
    image: telemetry/postgres
    networks:
      - internal
    environment:
      BI_TEAM_PASSWORD: test
      PGPASSWORD: telemetry
      POSTGRES_USER: postgres
      TELEMETRY_POSTGRES: db
      TELEMETRY_PASSWORD: test
    entrypoint: /telemetry/initdb.bash
    depends_on:
      db:
        condition: service_healthy

  pre-deploy-checks:
    image: telemetry/postgres
    networks:
      - internal
    environment:
      TELEMETRY_POSTGRES: db
      TELEMETRY_USER: telemetry
      TELEMETRY_PASSWORD: test
    entrypoint: /telemetry/pre_deploy_checks.bash
    depends_on:
      db:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully

volumes:
  pgdata:

networks:
  external: {}
  internal: {}
